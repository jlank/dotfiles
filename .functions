# Create a new directory and enter it
function md() {
	mkdir -p "$@" && cd "$@"
}

function sax() {
  java -jar ~/bin/saxon9he.jar "$@"
}

# Use Git’s colored diff when available
hash git &>/dev/null
if [ $? -eq 0 ]; then
	function diff() {
		git diff --no-index --color-words "$@"
	}
fi

git_email() {
  git config user.email || echo "no user.email found in ~/.gitconfig"
}

git_name() {
  git config user.name || echo "no user.name found in ~/.gitconfig"
}

: ${GIT_AUTHOR_NAME=$(git_name)}
: ${GIT_COMMITTER_NAME=$(git_name)}
: ${GIT_AUTHOR_EMAIL=$(git_email)}
: ${GIT_COMMITTER_EMAIL=$(git_email)}

author="$GIT_AUTHOR_NAME <$GIT_AUTHOR_EMAIL>"
commit="$GIT_COMMITTER_NAME <$GIT_COMMITTER_EMAIL>"

if [ "$author" = "$commit" ]; then
  echo "$author"
else
  echo "Author: $author"
  echo "Commit: $commit"
fi

# Create a data URL from an image (works for other file types too, if you tweak the Content-Type afterwards)
dataurl() {
	echo "data:image/${1##*.};base64,$(openssl base64 -in "$1")" | tr -d '\n'
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
	local port="${1:-8000}"
	sleep 1 && open "http://localhost:${port}/" &
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}

# Gzip-enabled `curl`
function gurl() {
	curl -sH "Accept-Encoding: gzip" "$@" | gunzip
}

# Syntax-highlight JSON strings or files
# Usage: `json '{"foo":42}'` or `echo '{"foo":42}' | json`
function json() {
	if [ -t 0 ]; then # argument
		python -mjson.tool <<< "$*" | pygmentize -l javascript
	else # pipe
		python -mjson.tool | pygmentize -l javascript
	fi
}

# credit: http://nparikh.org/notes/zshrc.txt
# Usage: extract <file>
# Description: extracts archived files / mounts disk images
# Note: .dmg/hdiutil is Mac OS X-specific.
extract () {
    if [ -f $1 ]; then
        case $1 in
            *.tar.bz2)  tar -jxvf $1                        ;;
            *.tar.gz)   tar -zxvf $1                        ;;
            *.bz2)      bunzip2 $1                          ;;
            *.dmg)      hdiutil mount $1                    ;;
            *.gz)       gunzip $1                           ;;
            *.tar)      tar -xvf $1                         ;;
            *.tbz2)     tar -jxvf $1                        ;;
            *.tgz)      tar -zxvf $1                        ;;
            *.zip)      unzip $1                            ;;
            *.ZIP)      unzip $1                            ;;
            *.pax)      cat $1 | pax -r                     ;;
            *.pax.Z)    uncompress $1 --stdout | pax -r     ;;
            *.Z)        uncompress $1                       ;;
            *)          echo "'$1' cannot be extracted/mounted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

clip () {
  [ -t 0 ] && pbpaste || pbcopy
}
function upto() {
  local EXPRESSION="$1"
  if [ -z "$EXPRESSION" ]; then
    echo "A folder expression must be provided." >&2
    return 1
  fi
  if [ "$EXPRESSION" = "/" ]; then
    cd "/"
    return 0
  fi
  local CURRENT_FOLDER="$(pwd)"
  local MATCHED_DIR=""
  local MATCHING=true

  while [ "$MATCHING" = true ]; do
    if [[ "$CURRENT_FOLDER" =~ "$EXPRESSION" ]]; then
      MATCHED_DIR="$CURRENT_FOLDER"
      CURRENT_FOLDER=$(dirname "$CURRENT_FOLDER")
    else
      MATCHING=false
    fi
  done
  if [ -n "$MATCHED_DIR" ]; then
    cd "$MATCHED_DIR"
    return 0
  else
    echo "No Match." >&2
    return 1
  fi
}
